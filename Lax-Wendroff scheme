#n goes for time index, j - for x index
L=2500
dt=2000/3600            #[h]
dx=25          #[km]
u0=36           #[km/h]
C0=10
T=int(L/u0)
nt_len= int(T/dt)  

x_grid=np.zeros(int(2500/25)+1)
for i in range(x_grid.shape[0]):
    x_grid[i]=i*25

C=np.zeros((x_grid.shape[0],nt_len))      #C(x,t)

for k in range(0,1125,25):
    C[int(k/25),0]=0

for k in range(1125,1375,25):
    C[int(k/25),0]=C0

for k in range(1375,2525,25):
    C[int(k/25),0]=0

sigma=u0*dt/dx

for n in range(nt_len-1):                 
    for j in range(1, x_grid.shape[0]-1):  
        C[j,n+1] = (C[j,n] + 
                    sigma * (C[j+1,n] - C[j-1,n]) / 2 + 
                    (sigma**2 / 2) * (C[j+1,n] - 2*C[j,n] + C[j-1,n]))

    # Periodic boundaries:
    C[0,n+1] = (C[0,n] + 
                sigma * (C[1,n] - C[-2,n]) / 2 + 
                (sigma**2 / 2) * (C[1,n] - 2*C[0,n] + C[-2,n]))
    
    C[-1,n+1] = C[0,n+1]  # duplicate first point (optional if you're plotting closed loop)


plt.figure(figsize=(10,6))
for t in [0, int(nt_len/4), int(nt_len/2), int(3*nt_len/4), nt_len-1]:
    plt.plot(x_grid, C[:,t], label=f't={t*dt/3600:.1f}h')
plt.xlabel('x [km]')
plt.ylabel('C(x,t)')
plt.title('Lax-Wendroff Advection')
plt.legend()
plt.grid()
plt.show()   


'''
plt.figure()
plt.figure(figsize=(7,6))
plt.xlabel('x [km]', fontsize=15)
plt.ylabel('C(x, t_max)', fontsize=15)
plt.plot(x_grid, C[:,-10],'--', linewidth=1)
plt.title('idk')
plt.grid()
plt.show() 
'''
